#!/usr/bin/env bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR/..

set -e -u

tryKillBg() {
  bgPids="$(jobs -p)"
  if [[ "$bgPids" == "" ]]; then
    return 0
  fi

  echo "killing background pids: `echo $bgPids | paste -sd' '`.."
  echo "$bgPids" | xargs -I'{}' pkill -TERM -P '{}' || return 0
}
TRAP='tryKillBg'
trap "$TRAP" EXIT

set -a
. .env.test
set +a

function cleanupDockerContainer {
    echo "stopping $2 docker container, id: ${1:0:12}"
    docker kill $1 >/dev/null || return 0
}

function storeEnvExec {
    PGHOST=$STORE_PGHOST \
        PGPORT=$STORE_PGPORT \
        PGUSER=$STORE_PGUSER \
        PGPASSWORD=$STORE_PGPASSWORD \
        PGDATABASE=$STORE_PGDATABASE \
        KANVAS_API_PORT=$STORE_API_PORT \
        CACHE_SIZE=0 \
        CACHE_TTL=0 \
        $@
}

db_docker=`DOCKER_ARGS='-d' DBSETUP_LOG=quiet INIT_QUEPASA=false ./script/local-db -c log_statement=all`
TRAP="$TRAP; cleanupDockerContainer $db_docker testdb"
trap "$TRAP" EXIT

sigErrFile=`mktemp`
rm $sigErrFile
(
    trap "echo 'yarn linked deps build failed' >> $sigErrFile" ERR
    echo "ensuring up to date build w/ yarn linked deps (api-lib, etc)..."
    ./script/build-deps || exit 1
    yarn build || exit 1

    trap "echo 'store build failed' >> $sigErrFile" ERR
    cd $SCRIPT_DIR/../../store-api-server;
    yarn install || exit 1
    ./script/build-deps >/dev/null 2>&1 || exit 1
    yarn build || exit 1
) &
(
    trap "echo 'db setup failed..' >> $sigErrFile" ERR

    echo "waiting for testdb setup (admin).. (docker: $db_docker)"
    ./script/wait-db

    psql -c 'create database store_replication'
    echo "setting up the store db"
    (
        cd "$SCRIPT_DIR/../../store-api-server"

        set -a
        . .env.test
        set +a

        echo "waiting for testdb setup (store).."
        storeEnvExec script/wait-db
        storeEnvExec script/migrate || exit 1 # >/dev/null 2>&1 || exit 1
        storeEnvExec psql < script/populate-testdb.sql || exit 1
    ) || exit 1
) &
wait
[ -f $sigErrFile ] && {
    cat $sigErrFile
    rm $sigErrFile
    exit 1
}

echo "starting the store api in the background"
(
    cd "$SCRIPT_DIR/../../store-api-server"

    DOTENV_CONFIG_PATH=.env.test storeEnvExec yarn run start:prod >/dev/null 2>&1
) &

yarn run seed || exit 1

while ! http --quiet :$STORE_API_PORT 2>/dev/null; do
    echo "store api not up yet.."
    sleep 1
done


echo "running tests.."

summaryTmp=`mktemp`
mkdir -p test/coverage
LOG_LEVEL=warning node --experimental-vm-modules node_modules/.bin/jest "$@" --coverage | tee test/coverage/summary.txt || exit 1
sed -n '/^-----/,$p' test/coverage/summary.txt > "$summaryTmp"
head -n 4 "$summaryTmp" | awk -F '|' '{print $2 $3 $4 $5}'
sed 's/^/\n/' "$summaryTmp" > test/coverage/summary.txt
