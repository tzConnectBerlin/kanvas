attributes:
  name: string
  description: text
  artifact: content
  display:
    type: content
    restrictions:
      mimetypes:
      - image/png
      - image/jpg
      - image/jpeg
  thumbnail:
    type: content
    restrictions:
      mimetypes:
      - image/png
      - image/jpg
      - image/jpeg
      maxSize: 10MB
  create_ready: boolean
  price: number
  edition_size: number
  categories: number[]
  onsale_from: date
  onsale_until: date
  proposed: boolean
  proposal_vote: votes
  prototype_vote: votes
  delist_vote: votes
  relist_vote: votes

states:
  creation:
    state_transitions:
    - next_state: setup_nft
      when:
      - nft.name.length > 0
      - nft.description.length > 0
      - nft.artifact.uri.length > 0
    mutables:
    - attributes: [name, artifact, display, thumbnail, description]
      by_roles: [creator]

  setup_nft:
    state_transitions:
    - next_state: proposed
      when:
      - nft.proposed
      - nft.edition_size > 0
      - nft.price > 0
      - nft.price < 1000000
      - nft.categories.length > 0
    mutables:
    - attributes: [price, edition_size, proposed, categories, onsale_from, onsale_until]
      by_roles: [editor, creator, admin]

  proposed:
    state_transitions:
    - next_state: setup_nft
      when:
      - nft.proposal_vote.no.length == 1
      do: |
        {
          // Storing rejected state for future reference inside 'proposal_reject_x',
          // where x equals the reject count of this nft

          let idx = 0;
          while (nft.hasOwnProperty('proposal_reject_' + idx)) {
            idx++;
          }
          let reject_name = 'proposal_reject_' + idx;

          nft[reject_name] = {};
          for (let key of Object.keys(nft)) {
            if (!key.startsWith('proposal_reject_')) {
              nft[reject_name][key] = structuredClone(nft[key]);
            }
          }

          nft.proposal_vote = null;
          nft.proposed = false;
        }
    - next_state: prototype
      when:
      - nft.proposal_vote.yes.length >= 1
    mutables:
    - attributes: [proposal_vote]
      by_roles: [moderator]

  prototype:
    state_transitions:
    - next_state: finish
      when:
      - nft.prototype_vote.yes.length >= 1
    - next_state: setup_nft
      when:
      - nft.prototype_vote.no.length >= 1
      do: |
        {
          // TODO: save state as it was under 'prototype_reject_..'

          nft.proposed = false;
          nft.proposal_vote = null;
          nft.propotype_vote = null;
        }
    mutables:
    - attributes: [prototype_vote]
      by_roles: [moderator]

  finish:
    state_transitions:
    - next_state: delisted
      when:
      - nft.delist_vote.yes.length >= 2
      do: |
        {
          // TODO: save state as it was under 'prototype_reject_..'

          nft.relist_vote = null;
        }
    mutables:
    - attributes: [delist_vote]
      by_roles: [moderator]

  delisted:
    state_transitions:
    - next_state: finish
      when:
      - nft.relist_vote.yes.length >= 2
      do: |
        {
          // TODO: save state as it was under 'prototype_reject_..'

          nft.delist_vote = null;
        }
    mutables:
    - attributes: [relist_vote]
      by_roles: [moderator]
