#!/usr/bin/env bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR/..

PEPPERMINT_VERSION=ee538be4d156ffb456107587eb71f14671afb1c7
QUEPASA_VERSION=${QUEPASA_VERSION:-'1.2.6'}

if [[ ${INIT_QUEPASA:-'true'} == "true" ]]; then
    # to set up the database schema of onchain_kanvas:
    source $SCRIPT_DIR/../../config/.env-kanvas
    export DATABASE_URL="host=$PGHOST dbname=$PGDATABASE user=$PGUSER password=$PGPASSWORD port=$PGPORT"

    docker run \
        -v $SCRIPT_DIR/../../config:/config \
        --network host \
        -e NODE_URL=$NODE_URL \
        -e DATABASE_URL="$DATABASE_URL" \
        ghcr.io/tzconnectberlin/que-pasa:$QUEPASA_VERSION \
        --contract-settings /config/kanvas.yaml --only-migrate \
        || exit 1
fi

if [[ ${INIT_PEPPERMINT:-'true'} == "true" ]]; then
    curl "https://raw.githubusercontent.com/tzConnectBerlin/peppermint/${PEPPERMINT_VERSION}/database/schema.sql" 2>/dev/null | psql || exit 1
fi

psql < ../lib/tezpay/server/database/schema.sql || exit 1

./script/shmig -t postgresql -d postgres://$PGUSER:$PGPASSWORD@$PGHOST:$PGPORT/$PGDATABASE up || exit 1
psql -v ON_ERROR_STOP=1 <<EOF
BEGIN;

`cat db_procedures/last_value_ignore_nulls.sql`
`cat db_procedures/nft_editions_locked.sql`
`cat db_procedures/price_bounds.sql`
`cat db_procedures/purchased_editions_pending_transfer.sql`
`cat db_procedures/nft_ids_filtered.sql`
`cat db_procedures/nfts_by_id.sql`

COMMIT;
EOF

psql <<EOF
CREATE INDEX IF NOT EXISTS onchain_transfer_entry_idx ON onchain_kanvas."entry.transfer.noname.txs"(token_id, to_);
CREATE INDEX IF NOT EXISTS onchain_mint_entry_idx ON onchain_kanvas."entry.mint_tokens.noname"(token_id, owner);
CREATE INDEX IF NOT EXISTS onchain_ledger_address_idx ON onchain_kanvas."storage.ledger_live"(${LEDGER_ADDRESS_COLUMN:-idx_assets_address});
CREATE INDEX IF NOT EXISTS onchain_txs_hash_idx ON que_pasa.txs(operation_hash);
CREATE INDEX IF NOT EXISTS onchain_txs_hash_bpchar_idx ON que_pasa.txs((operation_hash::bpchar));

CREATE INDEX IF NOT EXISTS paypoint_entry_pay_uuid_idx ON paypoint."entry.pay"(string);
CREATE INDEX IF NOT EXISTS paypoint_entry_default_uuid_idx ON paypoint."entry.default"(pay);

CREATE INDEX IF NOT EXISTS peppermint_command_name_state_idx ON peppermint.operations((command->>'name'), state);
CREATE INDEX IF NOT EXISTS peppermint_command_token_id_state_handler_idx ON peppermint.operations(state, (command->>'name'), ((command->'args'->'token_id')::int), (command->>'handler'));
CREATE INDEX IF NOT EXISTS peppermint_token_id_handler_to_idx ON peppermint.operations(((command->'args'->'token_id')::int), (command->>'handler'), (command->'args'->>'to_address'));
CREATE INDEX IF NOT EXISTS peppermint_handler_token_idx ON peppermint.operations((command->>'handler'), ((command->'args'->>'token_id')::int));

CREATE INDEX IF NOT EXISTS mtm_nft_format_nft_id_idx ON mtm_nft_format (nft_id);
CREATE INDEX IF NOT EXISTS mtm_cart_session_nft_nft_id_idx ON mtm_cart_session_nft (nft_id);
CREATE INDEX IF NOT EXISTS mtm_kanvas_user_nft_nft_id_idx ON mtm_kanvas_user_nft (nft_id);

CREATE INDEX IF NOT EXISTS payment_status_idx ON payment(nft_order_id, status);
CREATE INDEX IF NOT EXISTS payment_status2_idx ON payment(status);
CREATE INDEX IF NOT EXISTS payment_status3_idx ON payment(nft_order_id, provider, status);
CREATE INDEX IF NOT EXISTS payment_payment_id_idx ON payment(payment_id);
CREATE INDEX IF NOT EXISTS payment_external_id_idx ON payment(external_payment_id);

CREATE INDEX IF NOT EXISTS token_gate_ledger_address_amount_idx ON token_gate."storage.ledger_live"(idx_address, nat);

CREATE INDEX IF NOT EXISTS rates_currency_at_idx ON currency_rate(currency, at);

CREATE INDEX IF NOT EXISTS country_ip_from_to_idx ON ip_country(ip_from, ip_to);
EOF
